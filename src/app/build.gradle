plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}
apply from: "$project.rootDir/dependencies.gradle"

android {
    namespace 'com.klim.stock'

    def globalConfig = rootProject.ext
    compileSdkVersion globalConfig.compileSdkV
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.klim.stock"
        minSdkVersion minSdkV
        targetSdkVersion globalConfig.targetSdkV
        versionCode 2
        versionName "1.0.1"
        multiDexEnabled true

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        manifestPlaceholders = [MAPS_API_KEY: "${properties.getProperty('MAPS_API_KEY')}"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility globalConfig.javaVersion
        targetCompatibility globalConfig.javaVersion
    }
    kotlinOptions {
        jvmTarget = globalConfig.javaVersion
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    //presentation
    implementation project(':symbols_favorited')
    implementation project(':symbol_details')
    implementation project(':info')
    implementation project(':search')
    implementation project(':settings')

    //UC
    implementation project(':symbol_details_usecase:api')
    implementation project(':symbol_details_usecase:impl')
    implementation project(':history_usecase:api')
    implementation project(':history_usecase:impl')
    implementation project(':search_usecase:api')
    implementation project(':search_usecase:impl')
    implementation project(':favorited_usecase:api')
    implementation project(':favorited_usecase:impl')

    //Repositories
    implementation project(':stock_repository')
    implementation project(':symbol_repository:api')
    implementation project(':symbol_repository:impl')
    implementation project(':history_repository:api')
    implementation project(':history_repository:impl')
    implementation project(':favorited_repository:api')
    implementation project(':favorited_repository:impl')


    implementation project(':network_api')
    implementation project(':network_retrofit')

    implementation project(':windowsManager')
    implementation project(':resources')
    implementation project(':analytics')
    implementation project(':dependency_provider')

    implementation project(':coreUi')
    implementation project(':constants')

    implementation project(':navigation')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //androidx
    implementation 'androidx.multidex:multidex:2.0.1'
    kotlinAndroidCore()
    appcompat()
    material()
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    lifecycle()
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    dagger()

    //firebase
    api platform('com.google.firebase:firebase-bom:28.4.1') //todo modules
    api 'com.google.firebase:firebase-crashlytics-ktx'
    api 'com.google.firebase:firebase-analytics'


    implementation 'com.google.android.gms:play-services-maps:18.2.0' // TODO: now must stay here

    //storages
    implementation project(path: ':storage:api')
    implementation project(path: ':storage:impl')
    implementation project(path: ':cache')
    implementation project(path: ':database')


    implementation project(path: ':utils')
    implementation project(path: ':dependency_interface')


    //tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "io.mockk:mockk:1.12.0"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'
    testImplementation 'org.mockito:mockito-inline:3.8.0'
    testImplementation "androidx.arch.core:core-testing:2.2.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

//region check build time
def startTime
def endTime

gradle.taskGraph.whenReady { graph ->
    graph.allTasks.findAll { task -> task.project.name == 'symbol_details' }.each { task ->
        task.doFirst {
            startTime = System.currentTimeMillis()
        }
        task.doLast {
            endTime = System.currentTimeMillis()
            println "Task@ ${task.project.name}:${task.name} took ${endTime - startTime} milliseconds"
        }
    }
}
//endregion